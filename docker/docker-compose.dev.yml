# How to use:
# Build:        docker compose build
# Start:        docker compose up
# Stop:         docker compose down
# Rebuild:      docker compose up --build
# Background:   docker compose up -d
# View logs:    docker compose logs -f
# Normal configuration will only allow back-end services to connect to the DB no the host

services:
  client:
    image: certificate-manager/client:latest
    build:
      context: ../client
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ../client:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:3443/api
    networks:
      - frontend

  server:
    build:
      context: ../server
      dockerfile: Dockerfile
      target: builder  # Use the builder stage for development
    ports:
      - "3443:3443"
    volumes:
      - ../server:/app
      - server_modules:/app/node_modules
    environment:
      - NODE_ENV=development
      - DOCKER=true
      - MONGODB_URI=mongodb://mongodb:27017/certificate-manager  # Use container name
    command: npm run dev  # Override CMD to run in dev mode
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - frontend
      - backend

  mongodb:
    image: mongo:latest
    volumes:
      - ../database/data:/data/db
    networks:
      - backend
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  server_node_modules:
  server_modules:
    driver: local
